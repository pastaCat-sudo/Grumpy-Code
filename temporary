Temporary file containing ideas for upcoming tools and java sections



-About hashCode, HashMaps, HashSets.

We can create our own version of JCF structures. Like a HashMap.

In doing so we must understand how the hashing aspect of the structure bring performance benefits.

Bucket index calculated using:
int bucketIndex = hash & (capacity -1)  --> 0b100000 - 0b1 = 0b011111, then & with hash, results in a mapping of the hash between 0 and 31

compiler optimise 31*i to (i<<5)-i which is a left shift of 5 bits, effectively multiply by 32, then subtracts one... Something about geometric growth and powers of 2.

pseudocode for resizing trigger:
if (size > (capacity * load factor){
    int newCapacity = oldCapacity*2;
    redistribute(newCapacity);
}

interesting hashing technique (want to make hash values as uniformly distributed as possible to prevent collisions):
return 31 * Objects.hash(intValue1) + Objects.hash(intValue2);
vs
return 31 * Objects.hash(intValue1) + 37 * Objects.hash(intValue2);
also
we don't use: return 31 * (Objects.hash(intValue1) + Objects.hash(intValue2));
because this results in a less uniform spread - why apply the same factor to both hashes when you could apply different ones.

If we override the hashCode function, we also need to override the equals function which depends on the hashCode.


@Override
public int hashCode(){
    return 31 * Objects.hash(x) + Objects.hash(y);   //didn't work for my example... actually needed 31 * ... + 37 * ...
}
@Override
public boolean equals(Object o){
    if (this == o) {return true;}
    if (getClass() != o.getClass()) {return false;}
    Point point = (Point)o;
    return x == point.x && y == point.y;
}

@Override (option)
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Point point)) return false;
        return x == point.x && y == point.y;
    }
